#pragma once
#include <Arduino.h>
//Класс данных
class DATA {
  public:
     //Текущая дата
    String STRING_DATE              = "";
    //Присвоеный IP адрес
    String STRING_IP                = "";

    //Длина экрвнв
    uint16_t WIDGHT                 = 0;
    //Высота экрана
    uint8_t HEIGHT                  = 0; 
    //Высота графика
    uint8_t HEIGHT_GRAPH            = 0;

    //Максимальная высота графика
    uint8_t MAX_GRAPH               = 0; 
    //Предыдущее значение максимальной высоты графика
    uint8_t MAX_GRAPH_OLD           = 0;
    //Количество эллементов в массиве
    uint16_t COUNT_ARRAY            = 0; 
    //Количество эллементов в массиве мини
    uint16_t COUNT_ARRAY_FAST       = 0;


    //Напряжение
    float VOLTS_LOG                 = 0;
    //Сила тока
    float AMPS_LOG                  = 0;
    //Ватты
    float WATTS_LOG                 = 0;
    //Ватты
    float TEMPERATURES_LOG          = 0;
    //Сумма значений напряжения, для поиска усреднённого значения
    float VOLTAGE_GRAPH_SUMM        = 0; 
    //Сумма значений силы тока, для поиска усреднённого значения                            
    float AMP_GRAPH_SUMM            = 0;
    //Сумма значений ватт, для поиска усреднённого значения
    float WATTS_GRAPH_SUMM          = 0;                                    
    //Напряжение
    float VOLTS                     = 0;
    //Сила тока
    float AMPS                      = 0;
    //Ватты
    float WATTS                     = 0;
    //Миллиампер-час
    float mAh                       = 0; 
    //Милливатт-час
    float mWh                       = 0;
    //Обявляем массив для хнанения в нём данных по графику напряжения и вспомогательные переменные для получения среднего значения
    float VOLTAGE_GRAPH[278];
    //Обявляем массив для хнанения в нём данных по графику силы тока и вспомогательные переменные для получения среднего значения
    float AMP_GRAPH[278];
    //Обявляем массив для хнанения в нём данных по графику ватт и вспомогательные переменные для получения среднего значения
    float WATTS_GRAPH[278];
    //Обявляем массив для хнанения в нём данных по графику мини напряжения и вспомогательные переменные для получения среднего значения
    float VOLTAGE_GRAPH_FAST[142];
    //Обявляем массив для хнанения в нём данных по графику мини силы тока и вспомогательные переменные для получения среднего значения
    float AMP_GRAPH_FAST[142];
    //Обявляем массив для хнанения в нём данных по графику мини ватт и вспомогательные переменные для получения среднего значения
    float WATTS_GRAPH_FAST[142];
    

    //Скорость вращения вентилятора
    uint8_t FAN                     = 0;
    //Минимальная температура при которой начнет работать ШИМ вентилятора.
    const float MINIMUM_TEMPERATURE = 30;
    //Температура при которой скорость вентилятора будет максимальной.
    const float MAXIMUM_TEMPERATURE = 60;
    //Температура датчика
    float TEMPERATURE               = 0;
    //Номер дисплея
    uint8_t DISPLAY_NUMBER          = 0;
    //Размер файлов
    uint64_t SIZE                   = 0;
    //Определяем размер SD
    bool IS_SIZE                    = true;

    //Очиска EEPROM
    uint8_t IS_CLEAR_EEPROM         = 3;
};
